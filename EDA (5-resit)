dimension of dataset:
> dim(combined_data)
[1] 6563   17


summary statistics for categorical variables:
# Define the categorical columns of interest
categorical_cols <- c("yes_no_baby", "partner", "primary_occupation")

# Calculate frequency for each column
frequency <- lapply(combined_data[categorical_cols], table, useNA = "ifany")

# Calculate proportion for each column
proportion <- lapply(combined_data[categorical_cols], function(x) prop.table(table(x, useNA = "ifany")) * 100)

> # Display the results
> frequency
$yes_no_baby

   0    1 
6092  471 

$partner

   0    1 <NA> 
 744 5305  514 

$primary_occupation

   1    2    3    4    5    6    7    8   10   11   12   13   14 <NA> 
3641  215  158  146   16   11   81  738  175    7   33   32    1 1309 


# Create the density plot with `yes_no_baby`
ggplot(combined_data, aes(x = age, fill = as.factor(yes_no_baby))) +
  geom_density(alpha = 0.7) +
  labs(
    x = "Age",
    y = "Density",
    fill = "yes_no_baby" # Set legend title to "yes_no_baby"
  ) +
  scale_fill_brewer(palette = "Set2", labels = c("No", "Yes")) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10, face = "bold"),
    axis.text.y = element_text(size = 10, face = "bold"),
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
  )


summary statistics for ordinal variables:
> # Define the ordinal columns of interest
> ordinal_cols <- c("work_satisfaction", "colleague_atmosphere_satisfaction")
> 
> # Calculate frequency for each column
> frequency <- lapply(combined_data[ordinal_cols], table, useNA = "ifany")
> 
> # Calculate proportion for each column
> proportion <- lapply(combined_data[ordinal_cols], function(x) prop.table(table(x, useNA = "ifany")) * 100)
> 
> # Display the results
> frequency
$work_satisfaction

   0    1    2    3    4    5    6    7    8    9   10 <NA> 
  17   17   34   65   88  216  445 1207 1514  501  203 2256 

$colleague_atmosphere_satisfaction

   0    1    2    3    4    5    6    7    8    9   10 <NA> 
  13   10   24   58   58  170  367  950 1329  730  300 2554 

> proportion
$work_satisfaction
x
         0          1          2          3          4          5          6 
 0.2590279  0.2590279  0.5180558  0.9904007  1.3408502  3.2911778  6.7804358 
         7          8          9         10       <NA> 
18.3909797 23.0687186  7.6337041  3.0930977 34.3745238 

$colleague_atmosphere_satisfaction
x
         0          1          2          3          4          5          6 
 0.1980801  0.1523693  0.3656864  0.8837422  0.8837422  2.5902788  5.5919549 
         7          8          9         10       <NA> 
14.4750876 20.2498857 11.1229621  4.5710803 38.9151303



categorical-categorical:
# Load required libraries
library(ggplot2)
library(dplyr)
library(reshape2)

# Convert variables to factors if necessary
combined_data <- combined_data %>%
  mutate(
    yes_no_baby = as.factor(yes_no_baby),
    primary_occupation = as.factor(primary_occupation),
    future_children = as.factor(future_children),
    partner = as.factor(partner)
  )

# Define the variables to include in the heatmap
categorical_vars <- c("yes_no_baby", "primary_occupation", "future_children", "partner")

# Function to calculate Cramér's V
cramers_v <- function(var1, var2) {
  tbl <- table(var1, var2)
  chisq <- suppressWarnings(chisq.test(tbl)$statistic)
  n <- sum(tbl)
  return(sqrt(chisq / (n * (min(nrow(tbl), ncol(tbl)) - 1))))
}

# Create Cramér's V matrix
cramers_matrix <- matrix(NA, nrow = length(categorical_vars), ncol = length(categorical_vars), 
                         dimnames = list(categorical_vars, categorical_vars))

for (i in 1:length(categorical_vars)) {
  for (j in i:length(categorical_vars)) {
    cramers_matrix[i, j] <- cramers_v(
      combined_data[[categorical_vars[i]]],
      combined_data[[categorical_vars[j]]]
    )
    cramers_matrix[j, i] <- cramers_matrix[i, j]
  }
}

# Mask the upper triangle for triangular heatmap
cramers_matrix[upper.tri(cramers_matrix)] <- NA

# Melt the matrix for ggplot
melted_cramers <- melt(cramers_matrix, na.rm = TRUE)

# Generate the triangular heatmap
ggplot(melted_cramers, aes(x = Var2, y = Var1, fill = value)) +
  geom_tile(color = "white") +
  geom_text(aes(label = round(value, 2)), size = 4, color = "white") +
  scale_fill_gradient(low = "blue", high = "red", name = "Cramér's V") +
  labs(
    x = NULL,
    y = NULL,
    
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 10, face = "bold"),
    legend.position = "right"
  ) +
  coord_fixed()
